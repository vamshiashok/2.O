SQL
------------------------
SQL -> Structured Query Language
PL/SQL -> Procedural Language or Structured Query Language

Database -> A place where we are storing our data.

Before the database the information is stored in files, but the main 
  drawback of storing the information in files is there is no security for the files.

Different Database's 
-----------
->Oracle -> it is a software which manages the database.
->MySQL
->SQL Server
->PostgreSQL
->RDS
->DB2

SQL -> It is a language which is used to interact with the database.
The user can interact with the database like oracle using SQL Language.

NoSQL Database -> No Structured Query Language. It can handle large amount of data.

stores info in the form of 
a) key-value pairs
b) Graph
c) Document Oriented
d) Wide Column

Examples of NoSQL DB's
1) MongoDB
2) Cassandra

SQL database stores/performs operations on strucured data.
NoSQL performs on unstructured data.

Structured -> Clear organization of data (Ex: Table format)
Unstructured -> Data in the form of image, video or audio...

Types of Database's 
----------------------
1) OLTP (Online Transaction Processing) [used for day to day transactions]
2) OLAP (Online Analytical Processing) [Daily analysis of the organization]

Centralized DB
Distributed DB
Cloud DB
Hierarchical DB
Relational DB **********IMP*****

Relational Database 
---------------------
The data/information is organized in the form of tables.

Table 
----------
Row -> Record -> Tuple (The entire info)
Column -> Fields -> Domain -> Attribute

RDBMS has ACID Properties thats why RDBMS is popular

A -> Atomicity 
C -> Consistency
I -> Isolation
D -> Durability

Atomicity (Consider a transcation that it is either successful or not at all started)
          (If user A send 500Rs to User B either it will be credit to the User B or don't debit from the user A)

Consistency (Before and After transactions update the account balance simply called standards)

Isolation (Only one suppose more than one user wants to withdraw money from the one account it is not possible)

Durability (once all operations are completed you must commit the data)
----------------------------------------------------------------------------------

DBMS : It is a software which is used to create and manage the database.
        It is a interface b/w user and database.

RDBMS: The data which stored in the form of tables. The software which is uses the relations database.
-------------------------------------------------------------
Day 2
-------------------------------------------------------------
MySQL:

Syntax:
------------
The Query/statement always begin with the command.

Data types:
----------------
The type of information that we are storing.
MySQL Datatypes:
1) Numeric
2) String
3) Date
Numeric: 
--------------
a) Integer (A number which has no decimal point)
b) Float (Which is used to store real number with single precision)
c) Double (Which is used to store real number with double precision)
d) decimal(a,b)
    Ex: decimal(5,2) 5 -> Precision & 2 -> Scale
    243.42 
e) bit(size) (It is used to store binary values consists of 8 bits)
String: 
-----------------
a)char(n) (It store a fixed length string)
b)varchar(n) (It's a variable length string) if we use varchar you can modify the size of datatype.
c)text (There is no limit for size)
d)blob (To store images)

Date:
---------------
a)date (It gives the YY-MM-DD)
b)time (HH-MM-SS)
c)datetime (combination of above two)
d)timestamp (Exact time with date)

SQL is Not Case Sensitive, you can use INT or int , normally we use upper case for predefined keywords.

Different Language of commands:
-------------------------------------
1)DDL(Data Definition Language)
  -> create
  -> drop
  -> truncate
  -> rename
  -> alter
2)DML(Data Manipulation Language)
  -> insert 
  -> update
  -> delete
3)DQL/DRL(Data Query/Retrieval Language) **IMP**
  -> select
4)TCL(Transaction Control Language)
  -> commit
  -> rollback
  -> save point
5)DCL(Data Control Language) ***IMP at Admin Level***
  -> grant
  -> revoke

Creating Database
-------------------
>> create database krish;
>> create database college;

To list out the DB's
----------------------
>> show databases;

In which DB we have to store the data, we must specify it as
>> use krish/college;

To verify which database we are using currently, 
>> select database();

Creating a table in the college DB:
-----------------------------------
Sytax:
>> create table table_name(col1 dt1,col2 dt2,....coln dtn);
Ex:
>> create table student(S_ID int,name varchar(30),branch varchar(10),age float,DOB date);

To describe the table format:
-------------------------------
>> DESC student;
It returns the col name followed by the datatype of an existing table.
----------------------------------------------------------------------------------------------------------
Day 3
----------
To show the databases 
>> show databases;
To create a database
mysql> create database college;
Use the newly created database to store the info from now onwards
mysql> use college;

Creating a student table as
mysql> create table student (rollno int,
    -> name varchar(20),
    -> branch varchar(10),
    -> age int,
    -> mobileno int);

to check the table description use the following command
mysql> desc student;
+----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| rollno   | int         | YES  |     | NULL    |       |
| name     | varchar(20) | YES  |     | NULL    |       |
| branch   | varchar(10) | YES  |     | NULL    |       |
| age      | int         | YES  |     | NULL    |       |
| mobileno | int         | YES  |     | NULL    |       |
+----------+-------------+------+-----+---------+-------+

mysql> create table faculty(eid int, name varchar(20), desg varchar(10),
salary float);

To show the list of tables in the database
mysql> show tables;
+-------------------+
| Tables_in_college |
+-------------------+
| faculty           |
| student           |
+-------------------+
To delete the table from the database use 
mysql> drop table student;

To make some fields as not null and primary key for the table use
mysql> create table student(rollno int not null, name varchar(20) not null, branch varchar(10), marks float, primary key(rollno));

mysql> desc student;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| rollno | int         | NO   | PRI | NULL    |       |
| name   | varchar(20) | NO   |     | NULL    |       |
| branch | varchar(10) | YES  |     | NULL    |       |
| marks  | float       | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+


Inserting values into the table 
Sytax:
>> insert into table_name(col1,col2,....,coln)values(val1,val2,...,valn);

Inserting a single row 
mysql> insert into student (rollno,name,branch,marks) values (1,'krishna
','MCA',90.10);

Inserting a null value 
Here we are not giving the marks 
mysql> insert into student (rollno,name,branch) values (2,'crish','MBA');

Instead of giving the field names we can directly insert the values but if we use it
  we need to fill the all fields in the table.
mysql> insert into student values (3,'ashok','CSE',80.34);

Inserting multiple rows at a time as
mysql> insert into student values (4,'pranav','EEE',75.89),(5,'keerthi',
'MSC',60.89),(6,'sanjay','MECH',75.89);

SELECT is used to retrieve the data from the table 
Retrieving the rollno and name from the student table
mysql> select rollno,name from student;
+--------+---------+
| rollno | name    |
+--------+---------+
|      1 | krishna |
|      2 | crish   |
|      3 | ashok   |
|      4 | pranav  |
|      5 | keerthi |
|      6 | sanjay  |
+--------+---------+

To display the entire table 
mysql> select * from student;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | crish   | MBA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
|      6 | sanjay  | MECH   | 75.89 |
+--------+---------+--------+-------+

To remove the duplicate values or to display the unique marks
mysql> select distinct marks from student;
+-------+
| marks |
+-------+
|  90.1 |
|  NULL |
| 80.34 |
| 75.89 |
| 60.89 |
+-------+

Extract the student name and rollno from the student table who has got more than 80 marks
mysql> select rollno,name from student where marks>80;
+--------+---------+
| rollno | name    |
+--------+---------+
|      1 | krishna |
|      3 | ashok   |
+--------+---------+

To display only first two rows in a table
mysql> select * from student limit 2;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | crish   | MBA    |  NULL |
+--------+---------+--------+-------+

Extract the student details who has even rollno in the student table as
mysql> select * from student where rollno IN (2,4,6,8,10);
+--------+--------+--------+-------+
| rollno | name   | branch | marks |
+--------+--------+--------+-------+
|      2 | crish  | MBA    |  NULL |
|      4 | pranav | EEE    | 75.89 |
|      6 | sanjay | MECH   | 75.89 |
+--------+--------+--------+-------+

To add 10 marks for all the students in a table use
mysql> select marks+10 from student;
+-------------------+
| marks+10          |
+-------------------+
| 100.0999984741211 |
|              NULL |
| 90.33999633789062 |
| 85.88999938964844 |
| 70.88999938964844 |
| 85.88999938964844 |
+-------------------+

To delete a table from the database
mysql> show tables;
+-------------------+
| Tables_in_college |
+-------------------+
| faculty           |
| student           |
+-------------------+
It will delete the entire table from the database.
mysql> drop table faculty;

mysql> show tables;
+-------------------+
| Tables_in_college |
+-------------------+
| student           |
+-------------------+

To rename a table in the database as
mysql> alter table student rename to students;
mysql> show tables;
+-------------------+
| Tables_in_college |
+-------------------+
| students          |
+-------------------+

To delete a specified row in a table as
mysql> delete from students where rollno=6;
mysql> select * from students;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | crish   | MBA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
+--------+---------+--------+-------+
----------------------------------------------------------
Day 4
---------------------------
AS - Alias Keyword for fields to display the result but the original table doesn't change.
mysql> select marks+10 as newMarks from students;
+-------------------+
| newMarks          |
+-------------------+
| 100.0999984741211 |
|              NULL |
| 90.33999633789062 |
| 85.88999938964844 |
| 70.88999938964844 |
| 80.80000305175781 |
+-------------------+
-----------------------------------------------------
UPDATE: we are updating the data in the table.
mysql> select * from students;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | crish   | MBA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | ITI    |  70.8 |
+--------+---------+--------+-------+
mysql> update students set branch='MECH' where rollno=6;
mysql> select * from students;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | crish   | MBA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | MECH   |  70.8 |
+--------+---------+--------+-------+

mysql> update students set branch='MCA',name='Crishna' wher
e rollno=2;
mysql> select * from students;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | Crishna | MCA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | MECH   |  70.8 |
+--------+---------+--------+-------+
--------------------------------------------------------------------------------
ALTER: Changing the table not the values inside the table.
Adding a New Column to the existing table
----------------------------------------
mysql> alter table students add age int;
To add multiple columns at a time, 
>> alter table students add (dob date,mobno int);

mysql> update students set age=23 where rollno=1;
mysql> select * from students;
+--------+---------+--------+-------+------+
| rollno | name    | branch | marks | age  |
+--------+---------+--------+-------+------+
|      1 | krishna | MCA    |  90.1 |   23 |
|      2 | Crishna | MCA    |  NULL | NULL |
|      3 | ashok   | CSE    | 80.34 | NULL |
|      4 | pranav  | EEE    | 75.89 | NULL |
|      5 | keerthi | MSC    | 60.89 | NULL |
|      6 | Ganga   | MECH   |  70.8 | NULL |
+--------+---------+--------+-------+------+

Modifying the existing column 
-----------------------------
Syntax: >> alter table table_name modify colname datatype;
mysql> alter table students modify age float;
mysql> desc students;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| rollno | int         | NO   | PRI | NULL    |       |
| name   | varchar(20) | NO   |     | NULL    |       |
| branch | varchar(10) | YES  |     | NULL    |       |
| marks  | float       | YES  |     | NULL    |       |
| age    | float       | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+

Modifying the datatype of the existing column
>> alter table table_name alter column column_name datatype;
>> alter table students alter age int;

Deleting a column from the table
--------------------------------
Syntax: >> alter table table_name drop column col_name;
mysql> alter table students drop column age;
mysql> select * from students;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | Crishna | MCA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | MECH   |  70.8 |
+--------+---------+--------+-------+
or else we can use >> alter table students drop age;

modify means we are changing the data type of the column 
whereas rename means we are renaming the column name 

mysql> alter table students rename column marks to Marks;
mysql> select * from students;
+--------+---------+--------+-------+
| rollno | name    | branch | Marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | Crishna | MCA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | MECH   |  70.8 |
+--------+---------+--------+-------+

TRUNCATE will delete the table data but the entire table structure is still available in the database.
Whereas DROP will delete the table data along with its structure.
----------------------------------------------------------------------------------------------------------------
ORDER BY: We are retrieving the values by an order
mysql> select * from students order by Marks;
The above command diplays the Marks in Ascending order
+--------+---------+--------+-------+
| RollNo | Name    | Branch | Marks |
+--------+---------+--------+-------+
|      2 | Crishna | MCA    |  NULL |
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | MECH   |  70.8 |
|      4 | pranav  | EEE    | 75.89 |
|      3 | ashok   | CSE    | 80.34 |
|      1 | krishna | MCA    |  90.1 |
+--------+---------+--------+-------+

By default the order by command displays in Ascending order,
if you want to display in Descending order use 
mysql> select * from students order by Marks DESC;
+--------+---------+--------+-------+
| RollNo | Name    | Branch | Marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      6 | Ganga   | MECH   |  70.8 |
|      5 | keerthi | MSC    | 60.89 |
|      2 | Crishna | MCA    |  NULL |
+--------+---------+--------+-------+
Applying where condition,
mysql> select * from students where RollNO>3 order by Marks
;
+--------+---------+--------+-------+
| RollNo | Name    | Branch | Marks |
+--------+---------+--------+-------+
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | MECH   |  70.8 |
|      4 | pranav  | EEE    | 75.89 |
+--------+---------+--------+-------+
----------------------------------------------------------
Day 5
----------
truncate: Deletes table from the database but the structure is still there.
mysql> show tables;
+-------------------+
| Tables_in_college |
+-------------------+
| students          |
+-------------------+
mysql> desc students;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| RollNo | int         | NO   | PRI | NULL    |       |
| Name   | varchar(20) | NO   |     | NULL    |       |
| Branch | varchar(10) | YES  |     | NULL    |       |
| Marks  | float       | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+

mysql> drop table students;
mysql> select * from students;
ERROR 1146 (42S02): Table 'college.students' doesn't exist

Creating EMP Table:
mysql> create table EMP (EID int, EName varchar(20), salary
float, city varchar(20));
mysql> desc EMP;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| EID    | int         | YES  |     | NULL    |       |
| EName  | varchar(20) | YES  |     | NULL    |       |
| salary | float       | YES  |     | NULL    |       |
| city   | varchar(20) | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+
mysql> insert into EMP values(1,'crish',30000,'Bnglr'),(2,'k
rish',40000,'Delhi'),(3,'pranav',25000,'Chennai'),(4,'Tej',5
0000,'Mumbai'),(5,'Ashok',25000,'Pune');
mysql> select * from emp;
mysql> select * from emp;
+------+--------+--------+---------+
| EID  | EName  | salary | city    |
+------+--------+--------+---------+
|    1 | crish  |  30000 | Bnglr   |
|    2 | krish  |  40000 | Delhi   |
|    3 | pranav |  25000 | Chennai |
|    4 | Tej    |  50000 | Mumbai  |
|    5 | Ashok  |  25000 | Pune    |
+------+--------+--------+---------+

If both employees got the same salary but we have to display the Employee names
  in alphabetic order we use the commands like,
mysql> select * from emp order by salary,EName;
+------+--------+--------+---------+
| EID  | EName  | salary | city    |
+------+--------+--------+---------+
|    5 | Ashok  |  25000 | Pune    |
|    3 | pranav |  25000 | Chennai |
|    1 | crish  |  30000 | Bnglr   |
|    2 | krish  |  40000 | Delhi   |
|    4 | Tej    |  50000 | Mumbai  |
+------+--------+--------+---------+

mysql> select * from emp where salary > all (select salary f
rom emp where city='Pune');
+------+-------+--------+--------+
| EID  | EName | salary | city   |
+------+-------+--------+--------+
|    1 | crish |  30000 | Bnglr  |
|    2 | krish |  40000 | Delhi  |
|    4 | Tej   |  50000 | Mumbai |
+------+-------+--------+--------+
The above command will displays the employees who's salary has greater than the employees in the Pune city.

If we use ANY it can display the greater than any one of the salary, that is the reason to display the 26000.
mysql> select * from emp where salary > any (select salary f
rom emp where city='Pune');
+------+--------+--------+--------+
| EID  | EName  | salary | city   |
+------+--------+--------+--------+
|    1 | crish  |  30000 | Bnglr  |
|    2 | krish  |  40000 | Delhi  |
|    4 | Tej    |  50000 | Mumbai |
|    6 | kusuma |  26000 | Pune   |
+------+--------+--------+--------+

It displays the results only both conditions are matched.
mysql> select * from emp where salary=40000 and city='Delhi';
+------+-------+--------+-------+
| EID  | EName | salary | city  |
+------+-------+--------+-------+
|    2 | krish |  40000 | Delhi |
+------+-------+--------+-------+

It displays the results either of the condition matches.
mysql> select * from emp where salary=40000 or city='Pune';
+------+--------+--------+-------+
| EID  | EName  | salary | city  |
+------+--------+--------+-------+
|    2 | krish  |  40000 | Delhi |
|    5 | Ashok  |  25000 | Pune  |
|    6 | kusuma |  26000 | Pune  |
+------+--------+--------+-------+

Extract the employee details whose name starts with C ,
mysql> select * from emp where EName like 'c%';
+------+---------+--------+-------+
| EID  | EName   | salary | city  |
+------+---------+--------+-------+
|    1 | crish   |  30000 | Bnglr |
|    7 | crishna |  46000 | Bnglr |
+------+---------+--------+-------+
Extract the employee details whose name ends with A,
mysql> select * from emp where EName like '%a';
+------+---------+--------+-------+
| EID  | EName   | salary | city  |
+------+---------+--------+-------+
|    6 | kusuma  |  26000 | Pune  |
|    7 | crishna |  46000 | Bnglr |
+------+---------+--------+-------+
Extract the employee detail whose name starts with C and ends with A,
mysql> select * from emp where EName like 'c%a';
+------+---------+--------+-------+
| EID  | EName   | salary | city  |
+------+---------+--------+-------+
|    7 | crishna |  46000 | Bnglr |
+------+---------+--------+-------+

UNION and INTERSECTION
-----------------------
Syntax: select * from emp1 UNION/INTERSECTION select * from emp2;

Applying the arithmetic operators (unary operator)
mysql> select -salary from emp;
+---------+
| -salary |
+---------+
|  -30000 |
|  -40000 |
|  -25000 |
|  -50000 |
|  -25000 |
|  -26000 |
|  -46000 |
+---------+

To perform COUNT operation , we need to use GROUP BY.
To find out how many employees are there in each city.
mysql> select count(EID), city from emp group by city;
+------------+---------+
| count(EID) | city    |
+------------+---------+
|          2 | Bnglr   |
|          1 | Delhi   |
|          1 | Chennai |
|          1 | Mumbai  |
|          2 | Pune    |
+------------+---------+

WHERE is applied to each and every record on the table,
whereas HAVING is applied on GROUP BY.

Extract the employee details more than 1 employee in a city
mysql> select count(EID), city from emp group by city having count(
EID)>1;
+------------+-------+
| count(EID) | city  |
+------------+-------+
|          2 | Bnglr |
|          2 | Pune  |
+------------+-------+
Extract the emp details who are staying in Pune more than 1 emp records if available.
mysql> select count(EID), city from emp where city='Pune' group by
city having count(EID)>1;
+------------+------+
| count(EID) | city |
+------------+------+
|          2 | Pune |
+------------+------+
Maximum salary getting in a city,
mysql> select max(salary),city from emp group by city;
+-------------+---------+
| max(salary) | city    |
+-------------+---------+
|       46000 | Bnglr   |
|       40000 | Delhi   |
|       25000 | Chennai |
|       50000 | Mumbai  |
|       26000 | Pune    |
+-------------+---------+
Minimum salary getting in a city,
mysql> select min(salary),city from emp group by city;
+-------------+---------+
| min(salary) | city    |
+-------------+---------+
|       30000 | Bnglr   |
|       40000 | Delhi   |
|       25000 | Chennai |
|       50000 | Mumbai  |
|       25000 | Pune    |
+-------------+---------+
Sum of salaries based on the cities,
mysql> select sum(salary),city from emp group by city;
+-------------+---------+
| sum(salary) | city    |
+-------------+---------+
|       76000 | Bnglr   |
|       40000 | Delhi   |
|       25000 | Chennai |
|       50000 | Mumbai  |
|       51000 | Pune    |
+-------------+---------+
---------------------------------------------------------------------
Day 6
-----------
JOINS
------
Combining more than one table.
Suppose we have many tables are there in database, we wish to extract the 
data from more than one table we use joins.

1) Inner Join 
2) Outer Join [a)Left Outer Join b) Right Outer Join c) Full join] 
3) Cross Join

If we have to use joins there must and stood have the same fields in all the tables we are going to be join.
1)Inner Join: Only the matched one will shows in the result table.
2)Outer Join: All the content from table1 and table2 will be fetched.
a) Left Outer Join: we get all the records from the left table and only the records from the right table which having a key will be displayed.
b) Right Outer Join: The complete right table will be displayed corresponding to the left table only matched fields will get fetched.
c) Full Join: All the records from both the tables gets fetched.
3) Cross Join: cartesian product, one record from table 1 will get all the records from table 2.

Creating department table,
mysql> create table department(did int, dname varchar(20),eid int);
mysql> insert into department values(101,'ECE',2),(102,'CSE',3),(10
3,'EEE',1),(104,'MECH',4),(105,'MBA',6),(106,'CSE',8),(108,'ECE',9)
;
mysql> select * from department;
+------+-------+------+
| did  | dname | eid  |
+------+-------+------+
|  101 | ECE   |    2 |
|  102 | CSE   |    3 |
|  103 | EEE   |    1 |
|  104 | MECH  |    4 |
|  105 | MBA   |    6 |
|  106 | CSE   |    8 |
|  108 | ECE   |    9 |
+------+-------+------+
mysql> select * from emp;
+------+---------+--------+---------+
| eid  | ename   | salary | city    |
+------+---------+--------+---------+
|    1 | crish   |  30000 | Bnglr   |
|    2 | krish   |  40000 | Delhi   |
|    3 | pranav  |  25000 | Chennai |
|    4 | Tej     |  50000 | Mumbai  |
|    5 | Ashok   |  25000 | Pune    |
|    6 | kusuma  |  26000 | Pune    |
|    7 | crishna |  46000 | Bnglr   |
+------+---------+--------+---------+
Inner Join:
--------------
mysql> select e.eid,ename,salary,city,did,dname from emp e,departme
nt d where e.eid=d.eid;
+------+--------+--------+---------+------+-------+
| eid  | ename  | salary | city    | did  | dname |
+------+--------+--------+---------+------+-------+
|    2 | krish  |  40000 | Delhi   |  101 | ECE   |
|    3 | pranav |  25000 | Chennai |  102 | CSE   |
|    1 | crish  |  30000 | Bnglr   |  103 | EEE   |
|    4 | Tej    |  50000 | Mumbai  |  104 | MECH  |
|    6 | kusuma |  26000 | Pune    |  105 | MBA   |
+------+--------+--------+---------+------+-------+

Outer Join:
a) Left Outer Join:
mysql> select e.eid,e.ename,e.salary,e.city,d.did,d.dname from emp
e left outer join department d ON e.eid=d.eid;
The complete left side table is fetched if the right side has matched results then it will be fetched
else it is NULL.
+------+---------+--------+---------+------+-------+
| eid  | ename   | salary | city    | did  | dname |
+------+---------+--------+---------+------+-------+
|    1 | crish   |  30000 | Bnglr   |  103 | EEE   |
|    2 | krish   |  40000 | Delhi   |  101 | ECE   |
|    3 | pranav  |  25000 | Chennai |  102 | CSE   |
|    4 | Tej     |  50000 | Mumbai  |  104 | MECH  |
|    5 | Ashok   |  25000 | Pune    | NULL | NULL  |
|    6 | kusuma  |  26000 | Pune    |  105 | MBA   |
|    7 | crishna |  46000 | Bnglr   | NULL | NULL  |
+------+---------+--------+---------+------+-------+
b)Right Outer Join: 
All the right side table values get fetched and only matched records from left are showned and other records will be NULL.
mysql> select e.eid,e.ename,e.salary,e.city,d.did,d.dname from emp e right outer join department d ON e.eid=d.eid;
+------+--------+--------+---------+------+-------+
| eid  | ename  | salary | city    | did  | dname |
+------+--------+--------+---------+------+-------+
|    2 | krish  |  40000 | Delhi   |  101 | ECE   |
|    3 | pranav |  25000 | Chennai |  102 | CSE   |
|    1 | crish  |  30000 | Bnglr   |  103 | EEE   |
|    4 | Tej    |  50000 | Mumbai  |  104 | MECH  |
|    6 | kusuma |  26000 | Pune    |  105 | MBA   |
| NULL | NULL   |   NULL | NULL    |  106 | CSE   |
| NULL | NULL   |   NULL | NULL    |  108 | ECE   |
+------+--------+--------+---------+------+-------+

Full Join is directly not possible in MySQL so use the following one
mysql> select e.eid,e.ename,e.salary,e.city,d.did,d.dname from emp e left outer join department d ON e.eid=d.eid 
       union 
       select e.eid,e.ename,e.salary,e.city,d.did,d.dname from emp e right outer join department d ON e.eid=d.eid;
+------+---------+--------+---------+------+-------+
| eid  | ename   | salary | city    | did  | dname |
+------+---------+--------+---------+------+-------+
|    1 | crish   |  30000 | Bnglr   |  103 | EEE   |
|    2 | krish   |  40000 | Delhi   |  101 | ECE   |
|    3 | pranav  |  25000 | Chennai |  102 | CSE   |
|    4 | Tej     |  50000 | Mumbai  |  104 | MECH  |
|    5 | Ashok   |  25000 | Pune    | NULL | NULL  |
|    6 | kusuma  |  26000 | Pune    |  105 | MBA   |
|    7 | crishna |  46000 | Bnglr   | NULL | NULL  |
| NULL | NULL    |   NULL | NULL    |  106 | CSE   |
| NULL | NULL    |   NULL | NULL    |  108 | ECE   |
+------+---------+--------+---------+------+-------+

3) Cross Join: Feteches first record from the table 1 and all records from the table 2 like wise.
mysql> select * from emp cross join department;
+------+---------+--------+---------+------+-------+------+
| eid  | ename   | salary | city    | did  | dname | eid  |
+------+---------+--------+---------+------+-------+------+
|    7 | crishna |  46000 | Bnglr   |  101 | ECE   |    2 |
|    6 | kusuma  |  26000 | Pune    |  101 | ECE   |    2 |
|    5 | Ashok   |  25000 | Pune    |  101 | ECE   |    2 |
|    4 | Tej     |  50000 | Mumbai  |  101 | ECE   |    2 |
|    3 | pranav  |  25000 | Chennai |  101 | ECE   |    2 |
|    2 | krish   |  40000 | Delhi   |  101 | ECE   |    2 |
|    1 | crish   |  30000 | Bnglr   |  101 | ECE   |    2 |
|    7 | crishna |  46000 | Bnglr   |  102 | CSE   |    3 |
|    6 | kusuma  |  26000 | Pune    |  102 | CSE   |    3 |
|    5 | Ashok   |  25000 | Pune    |  102 | CSE   |    3 |
|    4 | Tej     |  50000 | Mumbai  |  102 | CSE   |    3 |
|    3 | pranav  |  25000 | Chennai |  102 | CSE   |    3 |
|    2 | krish   |  40000 | Delhi   |  102 | CSE   |    3 |
|    1 | crish   |  30000 | Bnglr   |  102 | CSE   |    3 |
|    7 | crishna |  46000 | Bnglr   |  103 | EEE   |    1 |
|    6 | kusuma  |  26000 | Pune    |  103 | EEE   |    1 |
|    5 | Ashok   |  25000 | Pune    |  103 | EEE   |    1 |
|    4 | Tej     |  50000 | Mumbai  |  103 | EEE   |    1 |
|    3 | pranav  |  25000 | Chennai |  103 | EEE   |    1 |
|    2 | krish   |  40000 | Delhi   |  103 | EEE   |    1 |
|    1 | crish   |  30000 | Bnglr   |  103 | EEE   |    1 |
|    7 | crishna |  46000 | Bnglr   |  104 | MECH  |    4 |
|    6 | kusuma  |  26000 | Pune    |  104 | MECH  |    4 |
|    5 | Ashok   |  25000 | Pune    |  104 | MECH  |    4 |
|    4 | Tej     |  50000 | Mumbai  |  104 | MECH  |    4 |
|    3 | pranav  |  25000 | Chennai |  104 | MECH  |    4 |
|    2 | krish   |  40000 | Delhi   |  104 | MECH  |    4 |
|    1 | crish   |  30000 | Bnglr   |  104 | MECH  |    4 |
|    7 | crishna |  46000 | Bnglr   |  105 | MBA   |    6 |
|    6 | kusuma  |  26000 | Pune    |  105 | MBA   |    6 |
|    5 | Ashok   |  25000 | Pune    |  105 | MBA   |    6 |
|    4 | Tej     |  50000 | Mumbai  |  105 | MBA   |    6 |
|    3 | pranav  |  25000 | Chennai |  105 | MBA   |    6 |
|    2 | krish   |  40000 | Delhi   |  105 | MBA   |    6 |
|    1 | crish   |  30000 | Bnglr   |  105 | MBA   |    6 |
|    7 | crishna |  46000 | Bnglr   |  106 | CSE   |    8 |
|    6 | kusuma  |  26000 | Pune    |  106 | CSE   |    8 |
|    5 | Ashok   |  25000 | Pune    |  106 | CSE   |    8 |
|    4 | Tej     |  50000 | Mumbai  |  106 | CSE   |    8 |
|    3 | pranav  |  25000 | Chennai |  106 | CSE   |    8 |
|    2 | krish   |  40000 | Delhi   |  106 | CSE   |    8 |
|    1 | crish   |  30000 | Bnglr   |  106 | CSE   |    8 |
|    7 | crishna |  46000 | Bnglr   |  108 | ECE   |    9 |
|    6 | kusuma  |  26000 | Pune    |  108 | ECE   |    9 |
|    5 | Ashok   |  25000 | Pune    |  108 | ECE   |    9 |
|    4 | Tej     |  50000 | Mumbai  |  108 | ECE   |    9 |
|    3 | pranav  |  25000 | Chennai |  108 | ECE   |    9 |
|    2 | krish   |  40000 | Delhi   |  108 | ECE   |    9 |
|    1 | crish   |  30000 | Bnglr   |  108 | ECE   |    9 |
+------+---------+--------+---------+------+-------+------+

----------------------------------------------
Day 7
----------------------------------------------
Sub Query:
-----------
We can simply say 'one query is written inside the another query'.
or 
The query which is written inside the another query is called sub query.
Rule: The Sub Queries are written inside paranthesis ().
      Order By is not possible in sub queries.
      Here first sub query is executed after that the outer query will execute.
      Generally the subqueries are written as SELECT and the OPERATOR.


Outer Query: The Query which is placed outside is called outer query.
Ex: 
mysql> select * from employee;
+------+--------+--------+---------+
| eid  | ename  | salary | city    |
+------+--------+--------+---------+
|    1 | crish  |   3000 | Bnglr   |
|    2 | krish  |  40000 | Delhi   |
|    3 | pranav |  25000 | Chennai |
|    4 | Tej    |  50000 | Mumbai  |
|    5 | Ashok  |  25000 | Pune    |
|    6 | Kusuma |  26000 | Pune    |
|    7 | Sanjay |  46000 | Bnglr   |
+------+--------+--------+---------+

mysql> select * from department;
+------+-------+------+
| did  | dname | eid  |
+------+-------+------+
|  101 | ECE   |    2 |
|  102 | CSE   |    3 |
|  103 | EEE   |    1 |
|  104 | MECH  |    4 |
|  105 | MBA   |    6 |
|  106 | CSE   |    8 |
|  108 | ECE   |    9 |
+------+-------+------+

Sub Query Example for above two tables:
IN Operator:
mysql> select ename,salary,city from employee where eid in (select eid from employee where salary>25000);
+--------+--------+--------+
| ename  | salary | city   |
+--------+--------+--------+
| krish  |  40000 | Delhi  |
| Tej    |  50000 | Mumbai |
| Kusuma |  26000 | Pune   |
| Sanjay |  46000 | Bnglr  |
+--------+--------+--------+
Here, first the subquery is executed as it fetches eid 2,4,6,7 and for the eid's it will fetch the 
  ename, salary, city from the employee table.
Syntax: select col1,col2,..coln from tablename where col operator (select cols from table wherecond);
Ex: mysql> select ename,salary,city from employee where salary=(select max(s
alary) from employee);
+-------+--------+--------+
| ename | salary | city   |
+-------+--------+--------+
| Tej   |  50000 | Mumbai |
+-------+--------+--------+
Note: If you are using = operator in subquery, make sure the subquery has to be return only single value or else we can get error.

NOT IN Operator:
Ex: mysql> select ename,salary from employee where eid NOT IN (select eid fr
om employee where salary>25000);
+--------+--------+
| ename  | salary |
+--------+--------+
| crish  |   3000 |
| pranav |  25000 |
| Ashok  |  25000 |
+--------+--------+
It fetches all the records of the employees who are getting less than 25k salary.

Correlated Sub Query:
Simply means Dependency
The Sub query depends on the outer query.
mysql> select eid,ename,salary,city from employee e where salary>(select avg(salary) from employee where city=e.city);
+------+--------+--------+-------+
| eid  | ename  | salary | city  |
+------+--------+--------+-------+
|    6 | Kusuma |  26000 | Pune  |
|    7 | Sanjay |  46000 | Bnglr |
+------+--------+--------+-------+
Note: Here the employee has the same city but with that only returns the greater than avg salary from employee table.

EXISTS: The output for this is TRUE/FALSE 
It is simply to check whether the data is existed or not.
mysql> select ename,salary,city from employee e where EXISTS (select * f
rom department d where e.eid=d.eid);
+--------+--------+---------+
| ename  | salary | city    |
+--------+--------+---------+
| crish  |   3000 | Bnglr   |
| krish  |  40000 | Delhi   |
| pranav |  25000 | Chennai |
| Tej    |  50000 | Mumbai  |
| Kusuma |  26000 | Pune    |
+--------+--------+---------+
NOT EXISTS:
mysql> select ename,salary,city from employee e where NOT EXISTS (select
 * from department d where e.eid=d.eid);
+--------+--------+-------+
| ename  | salary | city  |
+--------+--------+-------+
| Ashok  |  25000 | Pune  |
| Sanjay |  46000 | Bnglr |
+--------+--------+-------+
-----------------------------
Day 8
-----------------------------
Keys:
UNIQUE KEY
-----------
1) Unique Key: If a value is uniquely defined there are no duplicates in that particular column.
          Example: Student Roll No, Email, Mobile No
          Note: The unique key can allow NULL but only for the one record i.e, more than one record NOT NULL
          If you donot want to allow the duplicates in a particular column, we use UNIQUE Key.
          Two records doesnot want to maintain identical information,it stores only distinct information.
  Syntax: create table table_name(col1 dt1,col2 dt2,...,coln dtn UNIQUE);
  Here we are assigning the UNIQUE key for the column n.
          create table table_name(col1 dt1,col2 dt2,...,coln,UNIQUE(col1,col3));
          Here we are assigning the UNIQUE key for the multiple columns.

Ex: UNIQUE
mysql> create table std (sid int NOT NULL UNIQUE,sname varchar(20),age i
nt,city varchar(15));
mysql> insert into std (sid,sname,age,city) values (1,'krishna',23,'HDP'
);
mysql> insert into std (sid,sname,age,city) values (1,'ashok',28,'BNGLR');
ERROR 1062 (23000): Duplicate entry '1' for key 'std.sid'

To display full info about the table use 
mysql> show index from table_name;
constraint -> condition (Giving the constraint name to easily modify the keys in future)
mysql> create table std1 (sid int,sname varchar(20),age int,city varchar(15),phno int,constraint sid_phno UNIQUE(sid,phno));
mysql> show index from std1;
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+
| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+
| std1  |          0 | sid_phno |            1 | sid         | A         |           0 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |
| std1  |          0 | sid_phno |            2 | phno        | A         |           0 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+
mysql> alter table std1 drop index sid_phno;
mysql> show index from std1;
Empty set (0.01 sec)
--------------------------------------------------
Primary Key:
------------
The main goal is to identify a record uniquely in the table, simply means it doesnot allow duplicates.
Note: The Primary Key cannot be NULL.
      A Table consists of only one PRIMARY KEY
      Remove duplicates

Difference between UNIQUE and PRIMARY Key is 
In the UNIQUE Key one NULL is allowed in the column, if NULL is there in the column it is not used for identify a record.
Whereas in the PRIMARY Key even single NULL is allowed on that particular column suppose which field you want to makes as a primary key on that
  particular single value is NOT NULL.
Syntax: create table table_name (col1 dt1, col2 dt2 PRIMARY KEY, col3 dt3,...., coln dtn);
        create table table_name (col1 dt1, col2 dt2, col3 dt3,...., coln dtn, PRIMARY KEY(col1,col3));

mysql> create table std2 (sid int PRIMARY KEY,sname varchar(20),age int,
city varchar(15));
mysql> desc std2;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| sid   | int         | NO   | PRI | NULL    |       |
| sname | varchar(20) | YES  |     | NULL    |       |
| age   | int         | YES  |     | NULL    |       |
| city  | varchar(15) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
If we use Primary Key for a field by default it doesnot accept NULL values.

Using AUTO_INCREMENT
---------------------
mysql> create table std3(sid int AUTO_INCREMENT PRIMARY KEY,sname varcha
r(20),age int);
mysql> insert into std3(sid,sname,age) values (1,'krishna',23);
Query OK, 1 row affected (0.01 sec)
mysql> insert into std3(sname,age) values ('ashok',28);
Query OK, 1 row affected (0.01 sec)

mysql> select * from std3;
+-----+---------+------+
| sid | sname   | age  |
+-----+---------+------+
|   1 | krishna |   23 |
|   2 | ashok   |   28 |
+-----+---------+------+
Even though we are not giving the sid in the second step but it is auto incremented, i.e. the purpose of AUTO_INCREMENT

Assinging PRIMARY KEY to Multiple columns
mysql> create table std4(sid int,sname varchar(20),phno int,PRIMARY KEY(sid,phno));
mysql> desc std4;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| sid   | int         | NO   | PRI | NULL    |       |
| sname | varchar(20) | YES  |     | NULL    |       |
| phno  | int         | NO   | PRI | NULL    |       |
+-------+-------------+------+-----+---------+-------+

There is a table in the DG called emp, while the table creation i forgot to give the PRIMARY KEY for this, now we will alter this
mysql> desc emp;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| EID    | int         | YES  |     | NULL    |       |
| EName  | varchar(20) | YES  |     | NULL    |       |
| salary | float       | YES  |     | NULL    |       |
| city   | varchar(20) | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+
mysql> alter table emp add PRIMARY KEY(eid);
mysql> desc emp;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| EID    | int         | NO   | PRI | NULL    |       |
| EName  | varchar(20) | YES  |     | NULL    |       |
| salary | float       | YES  |     | NULL    |       |
| city   | varchar(20) | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+

Removing the PRIMARY KEY:
mysql> desc std4;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| sid   | int         | NO   | PRI | NULL    |       |
| sname | varchar(20) | YES  |     | NULL    |       |
| phno  | int         | NO   | PRI | NULL    |       |
+-------+-------------+------+-----+---------+-------+
mysql> alter table std4 drop PRIMARY KEY;
mysql> desc std4;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| sid   | int         | NO   |     | NULL    |       |
| sname | varchar(20) | YES  |     | NULL    |       |
| phno  | int         | NO   |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+

COMPOSITE KEY:
--------------
Combination of two or more columns that is used to identify a row in a table uniquely.
Note: we can have any no.of COMPOSITE KEYS for a table.
Ex: create table std4(sid int,sname varchar(20),phno int,PRIMARY KEY(sid,phno));
Combination of these are called COMPOSITE.
sid      phno
1        123
2        456
1        789
4        123
This data is allowed because here the combination of sid and phno is made as PRIMARY KEY .

FOREIGN KEY / Reference Key
------------
It is used to provide a link between other tables.
If you want to make a link between multiple tables we use FOREIGN KEY.
NOTE: The Primary key of one table matches with a key of another table it is called Foreign Key.
      While creating the Foreign key you need to mention the constraint name.

CASCADE: 
When you CASCADE, if one record is updated/deleted in a parent table that should immediately effects in the child table too.

SET NULL:
If you did any modification in the parent table then that record should be change to NULL in the child table.

RESTRICT:
Whatever the modification we done at the parent table that doesnot affects the child table.
---------------------------------------
Day 9
----------------------------------------
A Primary key of one table acts as a Foreign key of another table.
mysql> create table student1(sid int auto_increment primary key,sname varchar(20) not null);
mysql> desc student1;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| sid   | int         | NO   | PRI | NULL    | auto_increment |
| sname | varchar(20) | NO   |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+
mysql> create table department1(did int auto_increment primary key,dname
 varchar(20),sid int,foreign key(sid) references student1(sid));

mysql>  alter table department1 add constraint fk_dep foreign key(sid) r
eferences student1(sid) on delete cascade on update cascade;
Now, if you modify any record in a parent table(student1) it will automatically affects in the child table(department1).

mysql> insert into student1 values(1,'krishna');
mysql> select * from student1;
+-----+---------+
| sid | sname   |
+-----+---------+
|   1 | krishna |
|   2 | ashok   |
|   3 | kusuma  |
+-----+---------+
mysql> insert into department1(dname,sid) values('CSE',2);
mysql> select * from department1;
+-----+-------+------+
| did | dname | sid  |
+-----+-------+------+
|   1 | CSE   |    2 |
|   2 | ECE   |    1 |
|   3 | MCA   |    3 |
+-----+-------+------+
mysql> delete from student1 where sid=2;
ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`practice`.`department1`, 
  CONSTRAINT `department1_ibfk_1` FOREIGN KEY (`sid`) REFERENCES `student1` (`sid`))

mysql> delete from department1 where sid=2;
mysql> select * from department1;
+-----+-------+------+
| did | dname | sid  |
+-----+-------+------+
|   2 | ECE   |    1 |
|   3 | MCA   |    3 |
+-----+-------+------+
mysql> select * from student1;
+-----+---------+
| sid | sname   |
+-----+---------+
|   1 | krishna |
|   2 | ashok   |
|   3 | kusuma  |
+-----+---------+
We can't directly delete a record from the parent table, but we can delete a record from the child and no changes were made in the parent table.
But we can add records to the parent table.
---------------------------------------------------
Index:
-------
The main purpose of INDEX is to speed up the operations mainly on SELECT Operations.
To speed the retrieval process we use additional field called INDEX.
Using INDEX we can retrieve the information very fastly.
""""To increase the speed of retrieval""""
The INDEX is applied to the Primary Key.
Example for creating the INDEX:
--------------
mysql> create table user(uid int auto_increment primary key,username var
char(30) not null, email varchar(30) not null, index(username));
Here the Primary Key(uid) is called Primary Index and username is called Regular Index.

Syntax another type: create index index_name on table_name(col_name);
                     create index stu_ind on student(sname);
or
>>alter table table_name add index index_name(col_name);

mysql> insert into user(username,email) values('krishna','krishna@gmail.com');
mysql> insert into user(username,email) values('ashok','ashok@gmail.com');
mysql> select * from user;
+-----+----------+-------------------+
| uid | username | email             |
+-----+----------+-------------------+
|   1 | krishna  | krishna@gmail.com |
|   2 | ashok    | ashok@gmail.com   |
+-----+----------+-------------------+
Even though the index is not showing you but it is performed at the retrieval time.
i.e, if you execute a large query normally it takes sometime to return the result, but if you use index the retrieval of the info is faster.

>> explain select * from user;
mysql> explain select * from department1 where sid=1 and did=2;
+----+-------------+-------------+------------+-------+----------------+---------+---------+-------+------+----------+-------+
| id | select_type | table       | partitions | type  | possible_keys  | key     | key_len | ref   | rows | filtered | Extra |
+----+-------------+-------------+------------+-------+----------------+---------+---------+-------+------+----------+-------+
|  1 | SIMPLE      | department1 | NULL       | const | PRIMARY,fk_dep | PRIMARY | 4       | const |    1 |   100.00 | NULL  |
+----+-------------+-------------+------------+-------+----------------+---------+---------+-------+------+----------+-------+

mysql> show indexes from user;
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+
| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+
| user  |          0 | PRIMARY  |            1 | uid         | A         |           2 |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |
| user  |          1 | username |            1 | username    | A         |           2 |     NULL |   NULL |      | BTREE      |         |
         | YES     | NULL       |
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+
To drop an INDEX from the table:
mysql> drop index username on user;
------------------------------------------------
Day 10
----------------------------
VIEW: 
------
View is used to a Virtual Table,

Assume a table that contains very large amount of data, we have to retrieve some data from that
  table so that we can do some operations on some part of a table instead of doing or retriving the entire data,
  first iam getting required part from it on that table i perform my operations.
-> It improves the performance speed of the queuing.
Syntax to Create a View:
>> create view view_name AS select col1,col2,..coln from table_name; 
>> select * from view_name;

Ex: mysql> create view sample1 AS select username,email from user;
mysql> select * from sample1;
+----------+-------------------+
| username | email             |
+----------+-------------------+
| krishna  | krishna@gmail.com |
| ashok    | ashok@gmail.com   |
+----------+-------------------+
We can update the records in the view as 
mysql> update sample1 set email='krishna963@gmail.com' where username='k
rishna';
If you update any record in the view, it's also updated in the original table.
>>drop view view_name;
>>drop view if exists view_name; (It doesn't thrown an error if the view was not present in the DB)

Creation of Users with some Access Permissions:
-----------------------------------------------
>>create user IF NOT EXISTS new_username identified by 'password';
Generally the new_username/accountname consits of two parts
-> username@hostname 

To check the users in the DB
mysql> select user from mysql.user;
+------------------+
| user             |
+------------------+
| mysql.infoschema |
| mysql.session    |
| mysql.sys        |
| root             |
+------------------+

mysql> create user krishna@localhost identified by 'krishna963';
Query OK, 0 rows affected (0.04 sec)

mysql> create user IF NOT EXISTS krishna@localhost identified by 'krishna963';
Query OK, 0 rows affected, 1 warning (0.02 sec)
If we use IF NOT EXISTS it does not thrown error it just shows warning.

Granting Permissions/Privileges to the user
--------------------------------------------
GRANT: GRANT is used to give the privileges to the user.
>>grant privileges ON object TO username;
object -> levels of permissions
Privilege Levels:
1)GLOBAL: GRANT ALL ON *.* TO username/krsihna@localhost;
2)DATABASE:Provide permissions to a specific DB: GRANT ALL ON databasename.* TO username;
3)TABLE: We are proving permissions on all the columns in the given table: GRANT ALL ON DB.table_name TO username;
At the place of ALL we can give UPDATE for only update operatins for the user and DELETE for only delete operations.
4)COLUMN: GRANT select(col),insert(col2),update(col3) ON DB.table_name TO username;

To check whatever the permissions are there for the user:
mysql> show GRANTS for krishna@localhost;
+---------------------------------------------+
| Grants for krishna@localhost                |
+---------------------------------------------+
| GRANT USAGE ON *.* TO `krishna`@`localhost` |
+---------------------------------------------+
By default, it allocates all the root permissions for the user.

2) Giving privileges to a particular DB as
mysql> GRANT ALL ON practice.* TO krishna@localhost;
mysql> show grants for krishna@localhost;
+---------------------------------------------------------------+
| Grants for krishna@localhost                                  |
+---------------------------------------------------------------+
| GRANT USAGE ON *.* TO `krishna`@`localhost`                   |
| GRANT ALL PRIVILEGES ON `practice`.* TO `krishna`@`localhost` |
+---------------------------------------------------------------+
When you give root access i.e *.* to a user
mysql> GRANT ALL ON *.* TO krishna@localhost;
mysql> show grants for krishna@localhost;

| Grants for krishna@localhost









                                |

| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE, CREATE ROLE, DROP ROLE ON *.* TO `krishna`@`localhost`




                                |
| GRANT APPLICATION_PASSWORD_ADMIN,AUDIT_ABORT_EXEMPT,AUDIT_ADMIN,AUTHENTICATION_POLICY_ADMIN,BACKUP_ADMIN,BINLOG_ADMIN,BINLOG_ENCRYPTION_ADMIN,CLONE_ADMIN,CONNECTION_ADMIN,ENCRYPTION_KEY_ADMIN,FIREWALL_EXEMPT,FLUSH_OPTIMIZER_COSTS,FLUSH_STATUS,FLUSH_TABLES,FLUSH_USER_RESOURCES,GROUP_REPLICATION_ADMIN,GROUP_REPLICATION_STREAM,INNODB_REDO_LOG_ARCHIVE,INNODB_REDO_LOG_ENABLE,PASSWORDLESS_USER_ADMIN,PERSIST_RO_VARIABLES_ADMIN,REPLICATION_APPLIER,REPLICATION_SLAVE_ADMIN,RESOURCE_GROUP_ADMIN,RESOURCE_GROUP_USER,ROLE_ADMIN,SENSITIVE_VARIABLES_OBSERVER,SERVICE_CONNECTION_ADMIN,SESSION_VARIABLES_ADMIN,SET_USER_ID,SHOW_ROUTINE,SYSTEM_USER,SYSTEM_VARIABLES_ADMIN,TABLE_ENCRYPTION_ADMIN,TELEMETRY_LOG_ADMIN,XA_RECOVER_ADMIN ON *.* TO `krishna`@`localhost` |
| GRANT ALL PRIVILEGES ON `practice`.* TO `krishna`@`localhost`









                                |


To remove all privileges you assigned use
mysql> flush privileges;

To remove a user 
mysql> drop user krishna@localhost;
mysql> select user from mysql.user;
+------------------+
| user             |
+------------------+
| mysql.infoschema |
| mysql.session    |
| mysql.sys        |
| root             |
+------------------+
Successfully dropped the user krishna@localhost.
To check you are which user,
mysql> select user();
+----------------+
| user()         |
+----------------+
| root@localhost |
+----------------+

To switch from root user to krishna@localhost:
mysql> create user if not exists krishna@localhost identified by 'krishn
a963';
mysql> show grants for krishna@localhost;
+---------------------------------------------+
| Grants for krishna@localhost                |
+---------------------------------------------+
| GRANT USAGE ON *.* TO `krishna`@`localhost` |
+---------------------------------------------+
mysql> select user from mysql.user;
+------------------+
| user             |
+------------------+
| krishna          |
| mysql.infoschema |
| mysql.session    |
| mysql.sys        |
| root             |
+------------------+
mysql> select user();
+----------------+
| user()         |
+----------------+
| root@localhost |
+----------------+
Switch from root to krishna:


---------------------------------------------------------------------
DAY 11
------------
REVOKE:
-------
REVOKE is used to retrieve the permissions back from the user.
>REVOKE privilege_name ON object from username;
object -> DB/table/column....
Create a user:
mysql> create user krishna1@localhost identified by 'krishna963';
Assign some permissions:Giving permission on college database
mysql> GRANT ALL ON college.* TO krishna1@localhost;
To check the permissions for a user
mysql> show grants for krishna1@localhost;
+---------------------------------------------------------------+
| Grants for krishna1@localhost                                 |
+---------------------------------------------------------------+
| GRANT USAGE ON *.* TO `krishna1`@`localhost`                  |
| GRANT ALL PRIVILEGES ON `college`.* TO `krishna1`@`localhost` |
+---------------------------------------------------------------+
Revoking the permissions back we assigned:
mysql> REVOKE ALL ON college.* from krishna1@localhost;
mysql> show grants for krishna1@localhost;
+----------------------------------------------+
| Grants for krishna1@localhost                |
+----------------------------------------------+
| GRANT USAGE ON *.* TO `krishna1`@`localhost` |
+----------------------------------------------+
mysql> GRANT insert,update,select ON college.* TO krishna1@localhost;
mysql> show grants for krishna1@localhost;
+-----------------------------------------------------------------------+
| Grants for krishna1@localhost
|
+-----------------------------------------------------------------------+
| GRANT USAGE ON *.* TO `krishna1`@`localhost`
|
| GRANT SELECT, INSERT, UPDATE ON `college`.* TO `krishna1`@`localhost` |
+-----------------------------------------------------------------------+

mysql> REVOKE select,update,insert ON college.* from krishna1@localhost;
mysql> show grants for krishna1@localhost;
+----------------------------------------------+
| Grants for krishna1@localhost                |
+----------------------------------------------+
| GRANT USAGE ON *.* TO `krishna1`@`localhost` |
+----------------------------------------------+
TCL Commands:
-------------
1)SAVE POINT:
-----------
Wherever you left, you can again start from that point.
>SAVEPOINT name_of_the_savepoint;
2)ROLL BACK:
----------
Moving back to the SAVE POINT position 
>ROLLBACK TO SAVEPOINT name_of_the_savepoint;
RELEASE SAVEPOINT:
-----------------
If you donot require the savepoint anymore you can release the savepoint.
If you release the savepoint then rollback opertion can't be performed anymore.

To start a transaction we use "BEGIN" or "START"
1)create a transaction
2)create a savepoint

mysql> start transaction;
mysql> savepoint sp1;
Inserting record to an existing table
mysql> insert into emp values(10,'abc',10000,'sbd');
mysql> select * from emp;
+------+---------+--------+---------+
| eid  | ename   | salary | city    |
+------+---------+--------+---------+
|    1 | crish   |  30000 | Bnglr   |
|    2 | krish   |  40000 | Delhi   |
|    3 | pranav  |  25000 | Chennai |
|    4 | Tej     |  50000 | Mumbai  |
|    5 | Ashok   |  25000 | Pune    |
|    6 | kusuma  |  26000 | Pune    |
|    7 | crishna |  46000 | Bnglr   |
|   10 | abc     |  10000 | sbd     |
+------+---------+--------+---------+
After insertion create one more savepoint
mysql> savepoint sp2;
After that update a record in that table
mysql> update emp set salary=20000 where eid=10;
mysql> select * from emp;
+------+---------+--------+---------+
| eid  | ename   | salary | city    |
+------+---------+--------+---------+
|    1 | crish   |  30000 | Bnglr   |
|    2 | krish   |  40000 | Delhi   |
|    3 | pranav  |  25000 | Chennai |
|    4 | Tej     |  50000 | Mumbai  |
|    5 | Ashok   |  25000 | Pune    |
|    6 | kusuma  |  26000 | Pune    |
|    7 | crishna |  46000 | Bnglr   |
|   10 | abc     |  20000 | sbd     |
+------+---------+--------+---------+
Create one more savepoint.
mysql> savepoint sp3;
After that delete a record.
mysql> delete from emp where eid=7;
After create one more savepoint 
mysql> savepoint sp4;

After creating the transaction - sp1
after insertion - sp2
after udpate - sp3
after delete - sp4

Now  ROLLBACK to sp3
mysql> rollback to sp3;
mysql> select * from emp;
+------+---------+--------+---------+
| eid  | ename   | salary | city    |
+------+---------+--------+---------+
|    1 | crish   |  30000 | Bnglr   |
|    2 | krish   |  40000 | Delhi   |
|    3 | pranav  |  25000 | Chennai |
|    4 | Tej     |  50000 | Mumbai  |
|    5 | Ashok   |  25000 | Pune    |
|    6 | kusuma  |  26000 | Pune    |
|    7 | crishna |  46000 | Bnglr   |
|   10 | abc     |  20000 | sbd     |
+------+---------+--------+---------+
Even though we deleted the eid=7 record but we are rolled back to the sp3 i.e, after the updation of salary from 10k to 20k.
It means whatever the operations are done by the user after the sp3 those all will be undone.

After that delete a record
mysql> delete from emp where eid=6;
And we are commit the database
mysql> commit;
mysql> rollback to sp3;
ERROR 1305 (42000): SAVEPOINT sp3 does not exist
Once you commit to the database, you are not able to rollback.It is not possible to rollback after the commit.
Release the savepoint from the DB
mysql> release savepoint sp_ins;
If you try to rollback to the savpoint that you released.
mysql> rollback to sp_ins;
ERROR 1305 (42000): SAVEPOINT sp_ins does not exist

ACID Properties:
----------------
Atomicity (All or None)
Consistency (The database changes from one valid state into another valid state)
Isolation (only one thing, if multiple transactions are concurrently doing and one transaction doesn't depend on the other transactrion)
Durability (Once the transaction is commited all those are permanently updated in the database)

To set the isolation:
---------------------
>> set transaction isolation level;
levels -> read uncommited means the transaction can change made by any other uncommited transactions

-------------------------------------------------------------
Day 12
------------------
PROCEDURE:
STORED PROCEDURE:
Collection of pre-compiled statements.
i.e, I want to do some multiple set of operations instead of writing each and everytime i written a procedure
  whenever i need simply call that procedure.
The main advantage is it increases the performance of the query/statement.

Creating a Procedure:
---------------------
>>Delimiter &&
  create procedure name_of_the_procedure [IN/OUT/INOUT] [name_of_the_parameter datatype]
  BEGIN
        declaration (variables)
        executable_stmnts (code)
  END&&
  Delimiter;
Calling the procedure:
----------------------
>call procedurename(parameters);

mysql> delimiter &&
mysql> create procedure get_maxsalary()
    -> begin
    -> select * from emp where city='Chennai';
    -> end &&
mysql> delimiter;
Query OK, 0 rows affected (0.03 sec)

call the procedure,
mysql> call get_maxsalary();
+------+--------+--------+---------+
| eid  | ename  | salary | city    |
+------+--------+--------+---------+
|    3 | pranav |  25000 | Chennai |
+------+--------+--------+---------+

Passing arguments to the procedure,
mysql> delimiter &&
mysql> create procedure get_eid(IN a int)
    -> begin
    -> select * from emp limit a;
    -> end &&
mysql> call get_eid(5);
    -> &&
+------+--------+--------+---------+
| eid  | ename  | salary | city    |
+------+--------+--------+---------+
|    1 | crish  |  30000 | Bnglr   |
|    2 | krish  |  40000 | Delhi   |
|    3 | pranav |  25000 | Chennai |
|    4 | Tej    |  50000 | Mumbai  |
|    5 | Ashok  |  25000 | Pune    |
+------+--------+--------+---------+
Session Variables: Whatever the parameters that are calling from the procudure those are called Session variables.
                   Generally they are represented by using '@' symbol.

mysql> delimiter &&
mysql> create procedure high_sal(OUT maxsal float)
    -> begin
    -> select max(salary) into maxsal from emp;
    -> end &&
mysql> delimiter &&
mysql> call high_sal(@M);
    -> select @M;
    -> &&
Query OK, 1 row affected (0.01 sec)

+-------+
| @M    |
+-------+
| 50000 |
+-------+
Here the Session variable is 'M'. which holds the queries output and prints in the terminal.
To display all the procedures in a DB,
mysql> show procedure status where db='college';
    -> &&
+---------+---------------+-----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+
| Db      | Name          | Type      | Definer        | Modified            | Created             | Security_type | Comment | character_set_client | collation_connection | Database Collation |
+---------+---------------+-----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+
| college | display_sal   | PROCEDURE | root@localhost | 2024-07-29 10:33:22 | 2024-07-29 10:33:22 | DEFINER       |         | cp850
    | cp850_general_ci     | utf8mb4_0900_ai_ci |
| college | get_eid       | PROCEDURE | root@localhost | 2024-07-29 10:16:48 | 2024-07-29 10:16:48 | DEFINER       |         | cp850
    | cp850_general_ci     | utf8mb4_0900_ai_ci |
| college | get_maxsalary | PROCEDURE | root@localhost | 2024-07-27 14:36:47 | 2024-07-27 14:36:47 | DEFINER       |         | cp850
    | cp850_general_ci     | utf8mb4_0900_ai_ci |
| college | high_sal      | PROCEDURE | root@localhost | 2024-07-29 10:23:03 | 2024-07-29 10:23:03 | DEFINER       |         | cp850
    | cp850_general_ci     | utf8mb4_0900_ai_ci |
| college | same_sal      | PROCEDURE | root@localhost | 2024-07-29 09:56:38 | 2024-07-29 09:56:38 | DEFINER       |         | cp850
    | cp850_general_ci     | utf8mb4_0900_ai_ci |
+---------+---------------+-----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+

To drop  a procedure,
mysql> drop procedure get_maxsalary;

