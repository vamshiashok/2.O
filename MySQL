SQL
------------------------
SQL -> Structured Query Language
PL/SQL -> Procedural Language or Structured Query Language

Database -> A place where we are storing our data.

Before the database the information is stored in files, but the main 
  drawback of storing the information in files is there is no security for the files.

Different Database's 
-----------
->Oracle -> it is a software which manages the database.
->MySQL
->SQL Server
->PostgreSQL
->RDS
->DB2

SQL -> It is a language which is used to interact with the database.
The user can interact with the database like oracle using SQL Language.

NoSQL Database -> No Structured Query Language. It can handle large amount of data.

stores info in the form of 
a) key-value pairs
b) Graph
c) Document Oriented
d) Wide Column

Examples of NoSQL DB's
1) MongoDB
2) Cassandra

SQL database stores/performs operations on strucured data.
NoSQL performs on unstructured data.

Structured -> Clear organization of data (Ex: Table format)
Unstructured -> Data in the form of image, video or audio...

Types of Database's 
----------------------
1) OLTP (Online Transaction Processing) [used for day to day transactions]
2) OLAP (Online Analytical Processing) [Daily analysis of the organization]

Centralized DB
Distributed DB
Cloud DB
Hierarchical DB
Relational DB **********IMP*****

Relational Database 
---------------------
The data/information is organized in the form of tables.

Table 
----------
Row -> Record -> Tuple (The entire info)
Column -> Fields -> Domain -> Attribute

RDBMS has ACID Properties thats why RDBMS is popular

A -> Atomicity 
C -> Consistency
I -> Isolation
D -> Durability

Atomicity (Consider a transcation that it is either successful or not at all started)
          (If user A send 500Rs to User B either it will be credit to the User B or don't debit from the user A)

Consistency (Before and After transactions update the account balance simply called standards)

Isolation (Only one suppose more than one user wants to withdraw money from the one account it is not possible)

Durability (once all operations are completed you must commit the data)
----------------------------------------------------------------------------------

DBMS : It is a software which is used to create and manage the database.
        It is a interface b/w user and database.

RDBMS: The data which stored in the form of tables. The software which is uses the relations database.
-------------------------------------------------------------
Day 2
-------------------------------------------------------------
MySQL:

Syntax:
------------
The Query/statement always begin with the command.

Data types:
----------------
The type of information that we are storing.
MySQL Datatypes:
1) Numeric
2) String
3) Date
Numeric: 
--------------
a) Integer (A number which has no decimal point)
b) Float (Which is used to store real number with single precision)
c) Double (Which is used to store real number with double precision)
d) decimal(a,b)
    Ex: decimal(5,2) 5 -> Precision & 2 -> Scale
    243.42 
e) bit(size) (It is used to store binary values consists of 8 bits)
String: 
-----------------
a)char(n) (It store a fixed length string)
b)varchar(n) (It's a variable length string) if we use varchar you can modify the size of datatype.
c)text (There is no limit for size)
d)blob (To store images)

Date:
---------------
a)date (It gives the YY-MM-DD)
b)time (HH-MM-SS)
c)datetime (combination of above two)
d)timestamp (Exact time with date)

SQL is Not Case Sensitive, you can use INT or int , normally we use upper case for predefined keywords.

Different Language of commands:
-------------------------------------
1)DDL(Data Definition Language)
  -> create
  -> drop
  -> truncate
  -> rename
  -> alter
2)DML(Data Manipulation Language)
  -> insert 
  -> update
  -> delete
3)DQL/DRL(Data Query/Retrieval Language) **IMP**
  -> select
4)TCL(Transaction Control Language)
  -> commit
  -> rollback
  -> save point
5)DCL(Data Control Language) ***IMP at Admin Level***
  -> grant
  -> revoke

Creating Database
-------------------
>> create database krish;
>> create database college;

To list out the DB's
----------------------
>> show databases;

In which DB we have to store the data, we must specify it as
>> use krish/college;

To verify which database we are using currently, 
>> select database();

Creating a table in the college DB:
-----------------------------------
Sytax:
>> create table table_name(col1 dt1,col2 dt2,....coln dtn);
Ex:
>> create table student(S_ID int,name varchar(30),branch varchar(10),age float,DOB date);

To describe the table format:
-------------------------------
>> DESC student;
It returns the col name followed by the datatype of an existing table.
----------------------------------------------------------------------------------------------------------
Day 3
----------
To show the databases 
>> show databases;
To create a database
mysql> create database college;
Use the newly created database to store the info from now onwards
mysql> use college;

Creating a student table as
mysql> create table student (rollno int,
    -> name varchar(20),
    -> branch varchar(10),
    -> age int,
    -> mobileno int);

to check the table description use the following command
mysql> desc student;
+----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| rollno   | int         | YES  |     | NULL    |       |
| name     | varchar(20) | YES  |     | NULL    |       |
| branch   | varchar(10) | YES  |     | NULL    |       |
| age      | int         | YES  |     | NULL    |       |
| mobileno | int         | YES  |     | NULL    |       |
+----------+-------------+------+-----+---------+-------+

mysql> create table faculty(eid int, name varchar(20), desg varchar(10),
salary float);

To show the list of tables in the database
mysql> show tables;
+-------------------+
| Tables_in_college |
+-------------------+
| faculty           |
| student           |
+-------------------+
To delete the table from the database use 
mysql> drop table student;

To make some fields as not null and primary key for the table use
mysql> create table student(rollno int not null, name varchar(20) not null, branch varchar(10), marks float, primary key(rollno));

mysql> desc student;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| rollno | int         | NO   | PRI | NULL    |       |
| name   | varchar(20) | NO   |     | NULL    |       |
| branch | varchar(10) | YES  |     | NULL    |       |
| marks  | float       | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+


Inserting values into the table 
Sytax:
>> insert into table_name(col1,col2,....,coln)values(val1,val2,...,valn);

Inserting a single row 
mysql> insert into student (rollno,name,branch,marks) values (1,'krishna
','MCA',90.10);

Inserting a null value 
Here we are not giving the marks 
mysql> insert into student (rollno,name,branch) values (2,'crish','MBA');

Instead of giving the field names we can directly insert the values but if we use it
  we need to fill the all fields in the table.
mysql> insert into student values (3,'ashok','CSE',80.34);

Inserting multiple rows at a time as
mysql> insert into student values (4,'pranav','EEE',75.89),(5,'keerthi',
'MSC',60.89),(6,'sanjay','MECH',75.89);

SELECT is used to retrieve the data from the table 
Retrieving the rollno and name from the student table
mysql> select rollno,name from student;
+--------+---------+
| rollno | name    |
+--------+---------+
|      1 | krishna |
|      2 | crish   |
|      3 | ashok   |
|      4 | pranav  |
|      5 | keerthi |
|      6 | sanjay  |
+--------+---------+

To display the entire table 
mysql> select * from student;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | crish   | MBA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
|      6 | sanjay  | MECH   | 75.89 |
+--------+---------+--------+-------+

To remove the duplicate values or to display the unique marks
mysql> select distinct marks from student;
+-------+
| marks |
+-------+
|  90.1 |
|  NULL |
| 80.34 |
| 75.89 |
| 60.89 |
+-------+

Extract the student name and rollno from the student table who has got more than 80 marks
mysql> select rollno,name from student where marks>80;
+--------+---------+
| rollno | name    |
+--------+---------+
|      1 | krishna |
|      3 | ashok   |
+--------+---------+

To display only first two rows in a table
mysql> select * from student limit 2;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | crish   | MBA    |  NULL |
+--------+---------+--------+-------+

Extract the student details who has even rollno in the student table as
mysql> select * from student where rollno IN (2,4,6,8,10);
+--------+--------+--------+-------+
| rollno | name   | branch | marks |
+--------+--------+--------+-------+
|      2 | crish  | MBA    |  NULL |
|      4 | pranav | EEE    | 75.89 |
|      6 | sanjay | MECH   | 75.89 |
+--------+--------+--------+-------+

To add 10 marks for all the students in a table use
mysql> select marks+10 from student;
+-------------------+
| marks+10          |
+-------------------+
| 100.0999984741211 |
|              NULL |
| 90.33999633789062 |
| 85.88999938964844 |
| 70.88999938964844 |
| 85.88999938964844 |
+-------------------+

To delete a table from the database
mysql> show tables;
+-------------------+
| Tables_in_college |
+-------------------+
| faculty           |
| student           |
+-------------------+
It will delete the entire table from the database.
mysql> drop table faculty;

mysql> show tables;
+-------------------+
| Tables_in_college |
+-------------------+
| student           |
+-------------------+

To rename a table in the database as
mysql> alter table student rename to students;
mysql> show tables;
+-------------------+
| Tables_in_college |
+-------------------+
| students          |
+-------------------+

To delete a specified row in a table as
mysql> delete from students where rollno=6;
mysql> select * from students;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | crish   | MBA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
+--------+---------+--------+-------+
----------------------------------------------------------
Day 4
---------------------------
AS - Alias Keyword for fields to display the result but the original table doesn't change.
mysql> select marks+10 as newMarks from students;
+-------------------+
| newMarks          |
+-------------------+
| 100.0999984741211 |
|              NULL |
| 90.33999633789062 |
| 85.88999938964844 |
| 70.88999938964844 |
| 80.80000305175781 |
+-------------------+
-----------------------------------------------------
UPDATE: we are updating the data in the table.
mysql> select * from students;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | crish   | MBA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | ITI    |  70.8 |
+--------+---------+--------+-------+
mysql> update students set branch='MECH' where rollno=6;
mysql> select * from students;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | crish   | MBA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | MECH   |  70.8 |
+--------+---------+--------+-------+

mysql> update students set branch='MCA',name='Crishna' wher
e rollno=2;
mysql> select * from students;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | Crishna | MCA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | MECH   |  70.8 |
+--------+---------+--------+-------+
--------------------------------------------------------------------------------
ALTER: Changing the table not the values inside the table.
Adding a New Column to the existing table
----------------------------------------
mysql> alter table students add age int;
To add multiple columns at a time, 
>> alter table students add (dob date,mobno int);

mysql> update students set age=23 where rollno=1;
mysql> select * from students;
+--------+---------+--------+-------+------+
| rollno | name    | branch | marks | age  |
+--------+---------+--------+-------+------+
|      1 | krishna | MCA    |  90.1 |   23 |
|      2 | Crishna | MCA    |  NULL | NULL |
|      3 | ashok   | CSE    | 80.34 | NULL |
|      4 | pranav  | EEE    | 75.89 | NULL |
|      5 | keerthi | MSC    | 60.89 | NULL |
|      6 | Ganga   | MECH   |  70.8 | NULL |
+--------+---------+--------+-------+------+

Modifying the existing column 
-----------------------------
Syntax: >> alter table table_name modify colname datatype;
mysql> alter table students modify age float;
mysql> desc students;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| rollno | int         | NO   | PRI | NULL    |       |
| name   | varchar(20) | NO   |     | NULL    |       |
| branch | varchar(10) | YES  |     | NULL    |       |
| marks  | float       | YES  |     | NULL    |       |
| age    | float       | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+

Deleting a column from the table
--------------------------------
Syntax: >> alter table table_name drop column col_name;
mysql> alter table students drop column age;
mysql> select * from students;
+--------+---------+--------+-------+
| rollno | name    | branch | marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | Crishna | MCA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | MECH   |  70.8 |
+--------+---------+--------+-------+
or else we can use >> alter table students drop age;

modify means we are changing the data type of the column 
whereas rename means we are renaming the column name 

mysql> alter table students rename column marks to Marks;
mysql> select * from students;
+--------+---------+--------+-------+
| rollno | name    | branch | Marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      2 | Crishna | MCA    |  NULL |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | MECH   |  70.8 |
+--------+---------+--------+-------+

TRUNCATE will delete the table data but the entire table structure is still available in the database.
Whereas DROP will delete the table data along with its structure.
----------------------------------------------------------------------------------------------------------------
ORDER BY: We are retrieving the values by an order
mysql> select * from students order by Marks;
The above command diplays the Marks in Ascending order
+--------+---------+--------+-------+
| RollNo | Name    | Branch | Marks |
+--------+---------+--------+-------+
|      2 | Crishna | MCA    |  NULL |
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | MECH   |  70.8 |
|      4 | pranav  | EEE    | 75.89 |
|      3 | ashok   | CSE    | 80.34 |
|      1 | krishna | MCA    |  90.1 |
+--------+---------+--------+-------+

By default the order by command displays in Ascending order,
if you want to display in Descending order use 
mysql> select * from students order by Marks DESC;
+--------+---------+--------+-------+
| RollNo | Name    | Branch | Marks |
+--------+---------+--------+-------+
|      1 | krishna | MCA    |  90.1 |
|      3 | ashok   | CSE    | 80.34 |
|      4 | pranav  | EEE    | 75.89 |
|      6 | Ganga   | MECH   |  70.8 |
|      5 | keerthi | MSC    | 60.89 |
|      2 | Crishna | MCA    |  NULL |
+--------+---------+--------+-------+
Applying where condition,
mysql> select * from students where RollNO>3 order by Marks
;
+--------+---------+--------+-------+
| RollNo | Name    | Branch | Marks |
+--------+---------+--------+-------+
|      5 | keerthi | MSC    | 60.89 |
|      6 | Ganga   | MECH   |  70.8 |
|      4 | pranav  | EEE    | 75.89 |
+--------+---------+--------+-------+
----------------------------------------------------------
Day 5
----------
truncate: Deletes table from the database but the structure is still there.
mysql> show tables;
+-------------------+
| Tables_in_college |
+-------------------+
| students          |
+-------------------+
mysql> desc students;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| RollNo | int         | NO   | PRI | NULL    |       |
| Name   | varchar(20) | NO   |     | NULL    |       |
| Branch | varchar(10) | YES  |     | NULL    |       |
| Marks  | float       | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+

mysql> drop table students;
mysql> select * from students;
ERROR 1146 (42S02): Table 'college.students' doesn't exist

Creating EMP Table:
mysql> create table EMP (EID int, EName varchar(20), salary
float, city varchar(20));
mysql> desc EMP;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| EID    | int         | YES  |     | NULL    |       |
| EName  | varchar(20) | YES  |     | NULL    |       |
| salary | float       | YES  |     | NULL    |       |
| city   | varchar(20) | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+
mysql> insert into EMP values(1,'crish',30000,'Bnglr'),(2,'k
rish',40000,'Delhi'),(3,'pranav',25000,'Chennai'),(4,'Tej',5
0000,'Mumbai'),(5,'Ashok',25000,'Pune');
mysql> select * from emp;
mysql> select * from emp;
+------+--------+--------+---------+
| EID  | EName  | salary | city    |
+------+--------+--------+---------+
|    1 | crish  |  30000 | Bnglr   |
|    2 | krish  |  40000 | Delhi   |
|    3 | pranav |  25000 | Chennai |
|    4 | Tej    |  50000 | Mumbai  |
|    5 | Ashok  |  25000 | Pune    |
+------+--------+--------+---------+

If both employees got the same salary but we have to display the Employee names
  in alphabetic order we use the commands like,
mysql> select * from emp order by salary,EName;
+------+--------+--------+---------+
| EID  | EName  | salary | city    |
+------+--------+--------+---------+
|    5 | Ashok  |  25000 | Pune    |
|    3 | pranav |  25000 | Chennai |
|    1 | crish  |  30000 | Bnglr   |
|    2 | krish  |  40000 | Delhi   |
|    4 | Tej    |  50000 | Mumbai  |
+------+--------+--------+---------+

mysql> select * from emp where salary > all (select salary f
rom emp where city='Pune');
+------+-------+--------+--------+
| EID  | EName | salary | city   |
+------+-------+--------+--------+
|    1 | crish |  30000 | Bnglr  |
|    2 | krish |  40000 | Delhi  |
|    4 | Tej   |  50000 | Mumbai |
+------+-------+--------+--------+
The above command will displays the employees who's salary has greater than the employees in the Pune city.

If we use ANY it can display the greater than any one of the salary, that is the reason to display the 26000.
mysql> select * from emp where salary > any (select salary f
rom emp where city='Pune');
+------+--------+--------+--------+
| EID  | EName  | salary | city   |
+------+--------+--------+--------+
|    1 | crish  |  30000 | Bnglr  |
|    2 | krish  |  40000 | Delhi  |
|    4 | Tej    |  50000 | Mumbai |
|    6 | kusuma |  26000 | Pune   |
+------+--------+--------+--------+

It displays the results only both conditions are matched.
mysql> select * from emp where salary=40000 and city='Delhi';
+------+-------+--------+-------+
| EID  | EName | salary | city  |
+------+-------+--------+-------+
|    2 | krish |  40000 | Delhi |
+------+-------+--------+-------+

It displays the results either of the condition matches.
mysql> select * from emp where salary=40000 or city='Pune';
+------+--------+--------+-------+
| EID  | EName  | salary | city  |
+------+--------+--------+-------+
|    2 | krish  |  40000 | Delhi |
|    5 | Ashok  |  25000 | Pune  |
|    6 | kusuma |  26000 | Pune  |
+------+--------+--------+-------+

Extract the employee details whose name starts with C ,
mysql> select * from emp where EName like 'c%';
+------+---------+--------+-------+
| EID  | EName   | salary | city  |
+------+---------+--------+-------+
|    1 | crish   |  30000 | Bnglr |
|    7 | crishna |  46000 | Bnglr |
+------+---------+--------+-------+
Extract the employee details whose name ends with A,
mysql> select * from emp where EName like '%a';
+------+---------+--------+-------+
| EID  | EName   | salary | city  |
+------+---------+--------+-------+
|    6 | kusuma  |  26000 | Pune  |
|    7 | crishna |  46000 | Bnglr |
+------+---------+--------+-------+
Extract the employee detail whose name starts with C and ends with A,
mysql> select * from emp where EName like 'c%a';
+------+---------+--------+-------+
| EID  | EName   | salary | city  |
+------+---------+--------+-------+
|    7 | crishna |  46000 | Bnglr |
+------+---------+--------+-------+

UNION and INTERSECTION
-----------------------
Syntax: select * from emp1 UNION/INTERSECTION select * from emp2;

Applying the arithmetic operators (unary operator)
mysql> select -salary from emp;
+---------+
| -salary |
+---------+
|  -30000 |
|  -40000 |
|  -25000 |
|  -50000 |
|  -25000 |
|  -26000 |
|  -46000 |
+---------+

To perform COUNT operation , we need to use GROUP BY.
To find out how many employees are there in each city.
mysql> select count(EID), city from emp group by city;
+------------+---------+
| count(EID) | city    |
+------------+---------+
|          2 | Bnglr   |
|          1 | Delhi   |
|          1 | Chennai |
|          1 | Mumbai  |
|          2 | Pune    |
+------------+---------+

WHERE is applied to each and every record on the table,
whereas HAVING is applied on GROUP BY.

Extract the employee details more than 1 employee in a city
mysql> select count(EID), city from emp group by city having count(
EID)>1;
+------------+-------+
| count(EID) | city  |
+------------+-------+
|          2 | Bnglr |
|          2 | Pune  |
+------------+-------+
Extract the emp details who are staying in Pune more than 1 emp records if available.
mysql> select count(EID), city from emp where city='Pune' group by
city having count(EID)>1;
+------------+------+
| count(EID) | city |
+------------+------+
|          2 | Pune |
+------------+------+
Maximum salary getting in a city,
mysql> select max(salary),city from emp group by city;
+-------------+---------+
| max(salary) | city    |
+-------------+---------+
|       46000 | Bnglr   |
|       40000 | Delhi   |
|       25000 | Chennai |
|       50000 | Mumbai  |
|       26000 | Pune    |
+-------------+---------+
Minimum salary getting in a city,
mysql> select min(salary),city from emp group by city;
+-------------+---------+
| min(salary) | city    |
+-------------+---------+
|       30000 | Bnglr   |
|       40000 | Delhi   |
|       25000 | Chennai |
|       50000 | Mumbai  |
|       25000 | Pune    |
+-------------+---------+
Sum of salaries based on the cities,
mysql> select sum(salary),city from emp group by city;
+-------------+---------+
| sum(salary) | city    |
+-------------+---------+
|       76000 | Bnglr   |
|       40000 | Delhi   |
|       25000 | Chennai |
|       50000 | Mumbai  |
|       51000 | Pune    |
+-------------+---------+
---------------------------------------------------------------------
Day 6
-----------
JOINS
------
Combining more than one table.
Suppose we have many tables are there in database, we wish to extract the 
data from more than one table we use joins.

1) Inner Join 
2) Outer Join [a)Left Outer Join b) Right Outer Join c) Full join] 
3) Cross Join

If we have to use joins there must and stood have the same fields in all the tables we are going to be join.
1)Inner Join: Only the matched one will shows in the result table.
2)Outer Join: All the content from table1 and table2 will be fetched.
a) Left Outer Join: we get all the records from the left table and only the records from the right table which having a key will be displayed.
b) Right Outer Join: The complete right table will be displayed corresponding to the left table only matched fields will get fetched.
c) Full Join: All the records from both the tables gets fetched.
3) Cross Join: cartesian product, one record from table 1 will get all the records from table 2.

Creating department table,
mysql> create table department(did int, dname varchar(20),eid int);
mysql> insert into department values(101,'ECE',2),(102,'CSE',3),(10
3,'EEE',1),(104,'MECH',4),(105,'MBA',6),(106,'CSE',8),(108,'ECE',9)
;
mysql> select * from department;
+------+-------+------+
| did  | dname | eid  |
+------+-------+------+
|  101 | ECE   |    2 |
|  102 | CSE   |    3 |
|  103 | EEE   |    1 |
|  104 | MECH  |    4 |
|  105 | MBA   |    6 |
|  106 | CSE   |    8 |
|  108 | ECE   |    9 |
+------+-------+------+
mysql> select * from emp;
+------+---------+--------+---------+
| eid  | ename   | salary | city    |
+------+---------+--------+---------+
|    1 | crish   |  30000 | Bnglr   |
|    2 | krish   |  40000 | Delhi   |
|    3 | pranav  |  25000 | Chennai |
|    4 | Tej     |  50000 | Mumbai  |
|    5 | Ashok   |  25000 | Pune    |
|    6 | kusuma  |  26000 | Pune    |
|    7 | crishna |  46000 | Bnglr   |
+------+---------+--------+---------+
Inner Join:
--------------
mysql> select e.eid,ename,salary,city,did,dname from emp e,departme
nt d where e.eid=d.eid;
+------+--------+--------+---------+------+-------+
| eid  | ename  | salary | city    | did  | dname |
+------+--------+--------+---------+------+-------+
|    2 | krish  |  40000 | Delhi   |  101 | ECE   |
|    3 | pranav |  25000 | Chennai |  102 | CSE   |
|    1 | crish  |  30000 | Bnglr   |  103 | EEE   |
|    4 | Tej    |  50000 | Mumbai  |  104 | MECH  |
|    6 | kusuma |  26000 | Pune    |  105 | MBA   |
+------+--------+--------+---------+------+-------+

Outer Join:
a) Left Outer Join:
mysql> select e.eid,e.ename,e.salary,e.city,d.did,d.dname from emp
e left outer join department d ON e.eid=d.eid;
The complete left side table is fetched if the right side has matched results then it will be fetched
else it is NULL.
+------+---------+--------+---------+------+-------+
| eid  | ename   | salary | city    | did  | dname |
+------+---------+--------+---------+------+-------+
|    1 | crish   |  30000 | Bnglr   |  103 | EEE   |
|    2 | krish   |  40000 | Delhi   |  101 | ECE   |
|    3 | pranav  |  25000 | Chennai |  102 | CSE   |
|    4 | Tej     |  50000 | Mumbai  |  104 | MECH  |
|    5 | Ashok   |  25000 | Pune    | NULL | NULL  |
|    6 | kusuma  |  26000 | Pune    |  105 | MBA   |
|    7 | crishna |  46000 | Bnglr   | NULL | NULL  |
+------+---------+--------+---------+------+-------+
b)Right Outer Join: 
All the right side table values get fetched and only matched records from left are showned and other records will be NULL.
mysql> select e.eid,e.ename,e.salary,e.city,d.did,d.dname from emp e right outer join department d ON e.eid=d.eid;
+------+--------+--------+---------+------+-------+
| eid  | ename  | salary | city    | did  | dname |
+------+--------+--------+---------+------+-------+
|    2 | krish  |  40000 | Delhi   |  101 | ECE   |
|    3 | pranav |  25000 | Chennai |  102 | CSE   |
|    1 | crish  |  30000 | Bnglr   |  103 | EEE   |
|    4 | Tej    |  50000 | Mumbai  |  104 | MECH  |
|    6 | kusuma |  26000 | Pune    |  105 | MBA   |
| NULL | NULL   |   NULL | NULL    |  106 | CSE   |
| NULL | NULL   |   NULL | NULL    |  108 | ECE   |
+------+--------+--------+---------+------+-------+

Full Join is directly not possible in MySQL so use the following one
mysql> select e.eid,e.ename,e.salary,e.city,d.did,d.dname from emp e left outer join department d ON e.eid=d.eid 
       union 
       select e.eid,e.ename,e.salary,e.city,d.did,d.dname from emp e right outer join department d ON e.eid=d.eid;
+------+---------+--------+---------+------+-------+
| eid  | ename   | salary | city    | did  | dname |
+------+---------+--------+---------+------+-------+
|    1 | crish   |  30000 | Bnglr   |  103 | EEE   |
|    2 | krish   |  40000 | Delhi   |  101 | ECE   |
|    3 | pranav  |  25000 | Chennai |  102 | CSE   |
|    4 | Tej     |  50000 | Mumbai  |  104 | MECH  |
|    5 | Ashok   |  25000 | Pune    | NULL | NULL  |
|    6 | kusuma  |  26000 | Pune    |  105 | MBA   |
|    7 | crishna |  46000 | Bnglr   | NULL | NULL  |
| NULL | NULL    |   NULL | NULL    |  106 | CSE   |
| NULL | NULL    |   NULL | NULL    |  108 | ECE   |
+------+---------+--------+---------+------+-------+

3) Cross Join: Feteches first record from the table 1 and all records from the table 2 like wise.
mysql> select * from emp cross join department;
+------+---------+--------+---------+------+-------+------+
| eid  | ename   | salary | city    | did  | dname | eid  |
+------+---------+--------+---------+------+-------+------+
|    7 | crishna |  46000 | Bnglr   |  101 | ECE   |    2 |
|    6 | kusuma  |  26000 | Pune    |  101 | ECE   |    2 |
|    5 | Ashok   |  25000 | Pune    |  101 | ECE   |    2 |
|    4 | Tej     |  50000 | Mumbai  |  101 | ECE   |    2 |
|    3 | pranav  |  25000 | Chennai |  101 | ECE   |    2 |
|    2 | krish   |  40000 | Delhi   |  101 | ECE   |    2 |
|    1 | crish   |  30000 | Bnglr   |  101 | ECE   |    2 |
|    7 | crishna |  46000 | Bnglr   |  102 | CSE   |    3 |
|    6 | kusuma  |  26000 | Pune    |  102 | CSE   |    3 |
|    5 | Ashok   |  25000 | Pune    |  102 | CSE   |    3 |
|    4 | Tej     |  50000 | Mumbai  |  102 | CSE   |    3 |
|    3 | pranav  |  25000 | Chennai |  102 | CSE   |    3 |
|    2 | krish   |  40000 | Delhi   |  102 | CSE   |    3 |
|    1 | crish   |  30000 | Bnglr   |  102 | CSE   |    3 |
|    7 | crishna |  46000 | Bnglr   |  103 | EEE   |    1 |
|    6 | kusuma  |  26000 | Pune    |  103 | EEE   |    1 |
|    5 | Ashok   |  25000 | Pune    |  103 | EEE   |    1 |
|    4 | Tej     |  50000 | Mumbai  |  103 | EEE   |    1 |
|    3 | pranav  |  25000 | Chennai |  103 | EEE   |    1 |
|    2 | krish   |  40000 | Delhi   |  103 | EEE   |    1 |
|    1 | crish   |  30000 | Bnglr   |  103 | EEE   |    1 |
|    7 | crishna |  46000 | Bnglr   |  104 | MECH  |    4 |
|    6 | kusuma  |  26000 | Pune    |  104 | MECH  |    4 |
|    5 | Ashok   |  25000 | Pune    |  104 | MECH  |    4 |
|    4 | Tej     |  50000 | Mumbai  |  104 | MECH  |    4 |
|    3 | pranav  |  25000 | Chennai |  104 | MECH  |    4 |
|    2 | krish   |  40000 | Delhi   |  104 | MECH  |    4 |
|    1 | crish   |  30000 | Bnglr   |  104 | MECH  |    4 |
|    7 | crishna |  46000 | Bnglr   |  105 | MBA   |    6 |
|    6 | kusuma  |  26000 | Pune    |  105 | MBA   |    6 |
|    5 | Ashok   |  25000 | Pune    |  105 | MBA   |    6 |
|    4 | Tej     |  50000 | Mumbai  |  105 | MBA   |    6 |
|    3 | pranav  |  25000 | Chennai |  105 | MBA   |    6 |
|    2 | krish   |  40000 | Delhi   |  105 | MBA   |    6 |
|    1 | crish   |  30000 | Bnglr   |  105 | MBA   |    6 |
|    7 | crishna |  46000 | Bnglr   |  106 | CSE   |    8 |
|    6 | kusuma  |  26000 | Pune    |  106 | CSE   |    8 |
|    5 | Ashok   |  25000 | Pune    |  106 | CSE   |    8 |
|    4 | Tej     |  50000 | Mumbai  |  106 | CSE   |    8 |
|    3 | pranav  |  25000 | Chennai |  106 | CSE   |    8 |
|    2 | krish   |  40000 | Delhi   |  106 | CSE   |    8 |
|    1 | crish   |  30000 | Bnglr   |  106 | CSE   |    8 |
|    7 | crishna |  46000 | Bnglr   |  108 | ECE   |    9 |
|    6 | kusuma  |  26000 | Pune    |  108 | ECE   |    9 |
|    5 | Ashok   |  25000 | Pune    |  108 | ECE   |    9 |
|    4 | Tej     |  50000 | Mumbai  |  108 | ECE   |    9 |
|    3 | pranav  |  25000 | Chennai |  108 | ECE   |    9 |
|    2 | krish   |  40000 | Delhi   |  108 | ECE   |    9 |
|    1 | crish   |  30000 | Bnglr   |  108 | ECE   |    9 |
+------+---------+--------+---------+------+-------+------+


